name: Batch CD

on:
  push:
    branches: [ feature/TLY-97 batch ]
    paths:
      - 'threadly-apps/app-batch/**'
      - 'infra/batch/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
          - dev

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.read_tag.outputs.IMAGE_TAG }}

    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: JDK 21 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Gradle 환경 세팅 및 캐싱
        uses: gradle/actions/setup-gradle@v4

      - name: 배치 애플리케이션 빌드
        run: |
          ./gradlew :threadly-apps:app-batch:build --no-daemon

      - name: Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: IMAGE_TAG 설정
        id: read_tag
        run: |
          IMAGE_TAG="batch-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::8}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: 배치 도커 이미지 빌드
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_IMAGE_NAME_BATCH }}:$IMAGE_TAG -f ./infra/docker/batch/Dockerfile .

      - name: 도커 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 도커 허브 푸시
        run: |
          docker push ${{ secrets.DOCKER_IMAGE_NAME_BATCH }}:$IMAGE_TAG

      - name: 배치 배포 파일 준비
        run: |
          mkdir -p deploy-batch
          cp -r ./infra/batch/* ./deploy-batch/
          echo "IMAGE_TAG=$IMAGE_TAG" > ./deploy-batch/image_tag.txt

      - name: Artifact 업로드
        uses: actions/upload-artifact@v4
        with:
          name: batch-infra
          path: ./deploy-batch

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Artifact 다운로드
        uses: actions/download-artifact@v4
        with:
          name: batch-infra
          path: ./batch-infra

      - name: 배치 환경변수 생성
        run: |
          echo "SPRING_PROFILES_ACTIVE=prod,batch,metrics" >> .env
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
          echo "PROMETHEUS_PUSHGATEWAY_URL=${{ secrets.PROMETHEUS_PUSHGATEWAY_URL }}" >> .env
          echo "IMAGE_TAG=${{ needs.build.outputs.IMAGE_TAG }}" >> .env
          cp .env ./batch-infra/

      - name: 배치 서버 SCP 전송
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_BATCH_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: "./batch-infra/*"
          target: "/home/ubuntu/threadly-batch/"

      - name: 배치 애플리케이션 배포
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_BATCH_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            set -e
            cd /home/ubuntu/threadly-batch
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # 기존 컨테이너 정리
            docker compose down || true
            docker system prune -f
            
            # 새 이미지 Pull
            docker pull ${{ secrets.DOCKER_IMAGE_NAME_BATCH }}:${{ needs.build.outputs.IMAGE_TAG }}
            
            # systemd 서비스 배포
            chmod +x ./scripts/deploy.sh
            sudo ./scripts/deploy.sh ${{ needs.build.outputs.IMAGE_TAG }}